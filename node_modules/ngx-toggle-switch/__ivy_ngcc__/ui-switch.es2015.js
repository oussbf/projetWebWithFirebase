import { Component, EventEmitter, HostListener, Input, NgModule, Output, forwardRef } from '@angular/core';
import { FormsModule, NG_VALUE_ACCESSOR } from '@angular/forms';
import { CommonModule } from '@angular/common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';

function UiSwitchComponent_span_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 3);
    ɵngcc0.ɵɵelement(1, "span", 4);
    ɵngcc0.ɵɵelement(2, "span", 5);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("innerHtml", ctx_r0.labelOn, ɵngcc0.ɵɵsanitizeHtml);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("innerHtml", ctx_r0.labelOff, ɵngcc0.ɵɵsanitizeHtml);
} }
const UI_SWITCH_CONTROL_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    /* tslint:disable-next-line: no-use-before-declare */
    useExisting: forwardRef(() => UiSwitchComponent),
    multi: true
};
class UiSwitchComponent {
    constructor() {
        this.size = 'medium';
        this.change = new EventEmitter();
        this.color = 'rgb(100, 189, 99)';
        this.switchOffColor = '';
        this.switchColor = '#fff';
        this.defaultBgColor = '#fff';
        this.defaultBoColor = '#dfdfdf';
        this.labelOn = '';
        this.labelOff = '';
        this.onTouchedCallback = (v) => { };
        this.onChangeCallback = (v) => { };
    }
    /**
     * @param {?} v
     * @return {?}
     */
    set checked(v) {
        this._checked = v !== false;
    }
    /**
     * @return {?}
     */
    get checked() {
        return this._checked;
    }
    /**
     * @param {?} v
     * @return {?}
     */
    set disabled(v) {
        this._disabled = v !== false;
    }
    /**
     * @return {?}
     */
    get disabled() {
        return this._disabled;
    }
    /**
     * @param {?} v
     * @return {?}
     */
    set reverse(v) {
        this._reverse = v !== false;
    }
    /**
     * @return {?}
     */
    get reverse() {
        return this._reverse;
    }
    /**
     * @param {?=} flag
     * @return {?}
     */
    getColor(flag = '') {
        if (flag === 'borderColor') {
            return this.defaultBoColor;
        }
        if (flag === 'switchColor') {
            if (this.reverse) {
                return !this.checked ? this.switchColor : this.switchOffColor || this.switchColor;
            }
            return this.checked ? this.switchColor : this.switchOffColor || this.switchColor;
        }
        if (this.reverse) {
            return !this.checked ? this.color : this.defaultBgColor;
        }
        return this.checked ? this.color : this.defaultBgColor;
    }
    /**
     * @return {?}
     */
    onToggle() {
        if (this.disabled) {
            return;
        }
        this.checked = !this.checked;
        this.change.emit(this.checked);
        this.onChangeCallback(this.checked);
        this.onTouchedCallback(this.checked);
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    writeValue(obj) {
        if (obj !== this.checked) {
            this.checked = !!obj;
        }
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onChangeCallback = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onTouchedCallback = fn;
    }
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
}
UiSwitchComponent.ɵfac = function UiSwitchComponent_Factory(t) { return new (t || UiSwitchComponent)(); };
UiSwitchComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: UiSwitchComponent, selectors: [["ui-switch"]], hostBindings: function UiSwitchComponent_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function UiSwitchComponent_click_HostBindingHandler() { return ctx.onToggle(); });
    } }, inputs: { size: "size", color: "color", switchOffColor: "switchOffColor", switchColor: "switchColor", defaultBgColor: "defaultBgColor", defaultBoColor: "defaultBoColor", labelOn: "labelOn", labelOff: "labelOff", checked: "checked", disabled: "disabled", reverse: "reverse" }, outputs: { change: "change" }, features: [ɵngcc0.ɵɵProvidersFeature([UI_SWITCH_CONTROL_VALUE_ACCESSOR])], decls: 4, vars: 20, consts: [[1, "switch"], ["type", "checkbox", "id", "enabled", "name", "enabled", "aria-invalid", "false", 2, "display", "none", 3, "checked"], ["class", "switch-text", 4, "ngIf"], [1, "switch-text"], [1, "on", 3, "innerHtml"], [1, "off", 3, "innerHtml"]], template: function UiSwitchComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "span", 0);
        ɵngcc0.ɵɵelement(1, "input", 1);
        ɵngcc0.ɵɵelement(2, "small");
        ɵngcc0.ɵɵtemplate(3, UiSwitchComponent_span_3_Template, 3, 2, "span", 2);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵstyleProp("background-color", ctx.getColor())("border-color", ctx.getColor("borderColor"));
        ɵngcc0.ɵɵclassProp("checked", ctx.checked)("disabled", ctx.disabled)("switch-large", ctx.size === "large")("switch-medium", ctx.size === "medium")("switch-small", ctx.size === "small")("switch-labeled", !!ctx.labelOn || !!ctx.labelOff);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("checked", ctx.checked);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵstyleProp("background", ctx.getColor("switchColor"), ɵngcc0.ɵɵdefaultStyleSanitizer);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !!ctx.labelOn || !!ctx.labelOff);
    } }, directives: [ɵngcc1.NgIf], styles: [".switch[_ngcontent-%COMP%] {\n    background: #f00;\n    border: 1px solid #dfdfdf;\n    position: relative;\n    display: inline-block;\n    box-sizing: content-box;\n    overflow: visible;\n    padding: 0;\n    margin: 0;\n    cursor: pointer;\n    box-shadow: rgb(223, 223, 223) 0 0 0 0 inset;\n    transition: 0.3s ease-out all;\n    -webkit-transition: 0.3s ease-out all;\n    }\n\n    small[_ngcontent-%COMP%] {\n    border-radius: 100%;\n    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.4);\n    position: absolute;\n    top: 0;\n    left: 0;\n    transition: 0.3s ease-out all;\n    -webkit-transition: 0.3s ease-out all;\n    }\n\n    .switch-large[_ngcontent-%COMP%] {\n    width: 66px;\n    height: 40px;\n    border-radius: 40px;\n    }\n\n    .switch-large[_ngcontent-%COMP%]   small[_ngcontent-%COMP%] {\n    width: 40px;\n    height: 40px;\n    }\n\n    .switch-medium[_ngcontent-%COMP%] {\n    width: 50px;\n    height: 30px;\n    border-radius: 30px;\n    }\n\n    .switch-medium.switch-labeled[_ngcontent-%COMP%] {\n      width: 60px;\n    }\n\n    .switch-medium[_ngcontent-%COMP%]   small[_ngcontent-%COMP%] {\n    width: 30px;\n    height: 30px;\n    }\n\n    .switch-small[_ngcontent-%COMP%] {\n    width: 33px;\n    height: 20px;\n    border-radius: 20px;\n    }\n\n    .switch-small[_ngcontent-%COMP%]   small[_ngcontent-%COMP%] {\n    width: 20px;\n    height: 20px;\n    }\n\n    .switch-labeled[_ngcontent-%COMP%] {\n      cursor: pointer;\n    }\n\n    .checked[_ngcontent-%COMP%] {\n    background: rgb(100, 189, 99);\n    border-color: rgb(100, 189, 99);\n    }\n\n    .switch-large.checked[_ngcontent-%COMP%]   small[_ngcontent-%COMP%] {\n    left: 26px;\n    }\n\n    .switch-medium.checked[_ngcontent-%COMP%]   small[_ngcontent-%COMP%] {\n    left: 20px;\n    }\n\n    .switch-medium.switch-labeled.checked[_ngcontent-%COMP%]   small[_ngcontent-%COMP%] {\n      left: 30px;\n    }\n\n    .switch-small.checked[_ngcontent-%COMP%]   small[_ngcontent-%COMP%] {\n    left: 13px;\n    }\n\n    .disabled[_ngcontent-%COMP%] {\n    opacity: .50;\n    cursor: not-allowed;\n    }\n\n    .switch[_ngcontent-%COMP%]   .switch-text[_ngcontent-%COMP%] {\n      font-size: 13px;\n    }\n\n    .switch[_ngcontent-%COMP%]   .off[_ngcontent-%COMP%] {\n      opacity: 1;\n      position: absolute;\n      right: 10%;\n      top: 25%;\n      z-index: 0;\n      color:#A9A9A9;\n      transition: 0.4s ease-out all;\n    }\n\n    .switch[_ngcontent-%COMP%]   .on[_ngcontent-%COMP%] {\n      opacity:0;\n      z-index: 0;\n      color:#fff;\n      position: absolute;\n      top: 25%;\n      left: 9%;\n      transition: 0.4s ease-out all;\n    }\n\n    .switch.checked[_ngcontent-%COMP%]   .off[_ngcontent-%COMP%] {\n      opacity:0;\n    }\n\n    .switch.checked[_ngcontent-%COMP%]   .on[_ngcontent-%COMP%] {\n      opacity:1;\n    }"] });
/** @nocollapse */
UiSwitchComponent.ctorParameters = () => [];
UiSwitchComponent.propDecorators = {
    "size": [{ type: Input },],
    "change": [{ type: Output },],
    "color": [{ type: Input },],
    "switchOffColor": [{ type: Input },],
    "switchColor": [{ type: Input },],
    "defaultBgColor": [{ type: Input },],
    "defaultBoColor": [{ type: Input },],
    "labelOn": [{ type: Input },],
    "labelOff": [{ type: Input },],
    "checked": [{ type: Input },],
    "disabled": [{ type: Input },],
    "reverse": [{ type: Input },],
    "onToggle": [{ type: HostListener, args: ['click',] },],
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(UiSwitchComponent, [{
        type: Component,
        args: [{
                selector: 'ui-switch',
                template: `
    <span class="switch"
    [class.checked]="checked"
    [class.disabled]="disabled"
    [class.switch-large]="size === 'large'"
    [class.switch-medium]="size === 'medium'"
    [class.switch-small]="size === 'small'"
    [class.switch-labeled]="!!labelOn || !!labelOff"
    [style.background-color]="getColor()"
    [style.border-color]="getColor('borderColor')"
    >
    <input type="checkbox" id="enabled" name="enabled" [checked]="checked" style="display: none;" aria-invalid="false">
    <small [style.background]="getColor('switchColor')">
    </small>
    <span class="switch-text" *ngIf="!!labelOn || !!labelOff">
      <span class="on" [innerHtml]="labelOn"></span>
      <span class="off" [innerHtml]="labelOff"></span>
    </span>
    </span>
  `,
                styles: [`
    .switch {
    background: #f00;
    border: 1px solid #dfdfdf;
    position: relative;
    display: inline-block;
    box-sizing: content-box;
    overflow: visible;
    padding: 0;
    margin: 0;
    cursor: pointer;
    box-shadow: rgb(223, 223, 223) 0 0 0 0 inset;
    transition: 0.3s ease-out all;
    -webkit-transition: 0.3s ease-out all;
    }

    small {
    border-radius: 100%;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.4);
    position: absolute;
    top: 0;
    left: 0;
    transition: 0.3s ease-out all;
    -webkit-transition: 0.3s ease-out all;
    }

    .switch-large {
    width: 66px;
    height: 40px;
    border-radius: 40px;
    }

    .switch-large small {
    width: 40px;
    height: 40px;
    }

    .switch-medium {
    width: 50px;
    height: 30px;
    border-radius: 30px;
    }

    .switch-medium.switch-labeled {
      width: 60px;
    }

    .switch-medium small {
    width: 30px;
    height: 30px;
    }

    .switch-small {
    width: 33px;
    height: 20px;
    border-radius: 20px;
    }

    .switch-small small {
    width: 20px;
    height: 20px;
    }

    .switch-labeled {
      cursor: pointer;
    }

    .checked {
    background: rgb(100, 189, 99);
    border-color: rgb(100, 189, 99);
    }

    .switch-large.checked small {
    left: 26px;
    }

    .switch-medium.checked small {
    left: 20px;
    }

    .switch-medium.switch-labeled.checked small {
      left: 30px;
    }

    .switch-small.checked small {
    left: 13px;
    }

    .disabled {
    opacity: .50;
    cursor: not-allowed;
    }

    .switch .switch-text {
      font-size: 13px;
    }

    .switch .off {
      opacity: 1;
      position: absolute;
      right: 10%;
      top: 25%;
      z-index: 0;
      color:#A9A9A9;
      transition: 0.4s ease-out all;
    }

    .switch .on {
      opacity:0;
      z-index: 0;
      color:#fff;
      position: absolute;
      top: 25%;
      left: 9%;
      transition: 0.4s ease-out all;
    }

    .switch.checked .off {
      opacity:0;
    }

    .switch.checked .on {
      opacity:1;
    }

    `],
                providers: [UI_SWITCH_CONTROL_VALUE_ACCESSOR]
            }]
    }], function () { return []; }, { size: [{
            type: Input
        }], change: [{
            type: Output
        }], color: [{
            type: Input
        }], switchOffColor: [{
            type: Input
        }], switchColor: [{
            type: Input
        }], defaultBgColor: [{
            type: Input
        }], defaultBoColor: [{
            type: Input
        }], labelOn: [{
            type: Input
        }], labelOff: [{
            type: Input
        }], checked: [{
            type: Input
        }], disabled: [{
            type: Input
        }], reverse: [{
            type: Input
        }], onToggle: [{
            type: HostListener,
            args: ['click']
        }] }); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class UiSwitchModule {
}
UiSwitchModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: UiSwitchModule });
UiSwitchModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function UiSwitchModule_Factory(t) { return new (t || UiSwitchModule)(); }, imports: [[
            CommonModule,
            FormsModule
        ],
        FormsModule] });
/** @nocollapse */
UiSwitchModule.ctorParameters = () => [];
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(UiSwitchModule, { declarations: function () { return [UiSwitchComponent]; }, imports: function () { return [CommonModule,
        FormsModule]; }, exports: function () { return [FormsModule,
        UiSwitchComponent]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(UiSwitchModule, [{
        type: NgModule,
        args: [{
                declarations: [
                    UiSwitchComponent
                ],
                imports: [
                    CommonModule,
                    FormsModule
                ],
                exports: [
                    FormsModule,
                    UiSwitchComponent
                ]
            }]
    }], null, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Generated bundle index. Do not edit.
 */

export { UiSwitchComponent, UiSwitchModule };

//# sourceMappingURL=ui-switch.es2015.js.map